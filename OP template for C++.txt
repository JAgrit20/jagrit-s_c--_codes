#include <bits/stdc++.h>
using namespace std;
 
typedef long long int ll;
typedef long double ld;
typedef vector<int> vi;                     typedef vector<ll> vl;
typedef vector<vi> vvi;                     typedef vector<vl> vvl;
typedef pair<int, int> pii;                 typedef pair<ll, ll> pll;
typedef vector<pii> vpii;                   typedef vector<pll> vpll;
typedef set<int> si;                        typedef set<ll> sl; 
typedef set<pii> spii;                      typedef set<pll> spll;
typedef vector<si> vsi;                     typedef vector<sl> vsl;
typedef vector<spii> vspii;                 typedef vector<spll> vspll;
typedef vector<string> vs;                  typedef vector<bool> vb;
typedef map<int,int> mpii;                  typedef map<ll,ll> mpll;
typedef vector<char> vc;
 
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define mk make_pair
#define in insert
#define sz(x) (int)x.size()
#define fs first
#define sc second
#define sp <<" "<<
#define spe <<" ";
#define lp(x,n) for(ll x = 0; x < n; ++x)
#define lop(x,n) for(ll x = 1; x < n; ++x)
#define JOKER ios_base::sync_with_stdio (false) ; cin.tie(0) ; cout.tie(0) ;
 
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
 
const int MAXN=2e5+5;
const ll mod=1e9+7;
const ld pi=3.141592653;
 
// ll spf[10000001];
// void sieve();
// ll power(ll x, ll y, ll p);
// ll modInverse(ll n, ll p);
// ll nCrModPFormat(ll n, ll r, ll p);
 
void solve()
{   
    ll n;
    cin>>n;
    ll arr[n];
    lp(i,n){
        cin>>arr[i];
    }
    int flag=0;
    ll cmp=arr[0],chk;
    for(int i=1;i<n;i++){
        if(arr[i]>cmp){
            if(flag==1 && arr[i]>chk){
                cmp=chk;
                flag=0;
            }
        }
        else{
            if(flag==0){
                chk=cmp;
                cmp=arr[i];
                flag=1;
            }
            else{
                cmp=arr[i];
            }
        }
    }
    if(flag==0){
        cout<<"YES\n";
    }
    else
    cout<<"NO\n";
    return;
}
 
int main()
{
    JOKER
    int t=1;
    cin>>t;
    while(t--)
        solve();
    return 0;
}
 
// void sieve(){
//     lop(i,10000001){
//         spf[i]=i;
//     }
//     for(ll i=2;i<10000001;i+=2){
//         spf[i]=2;
//     }
//     for(ll i=3;i*i<=10000001;i+=2){
//         if(spf[i]==i){
//             for(ll j=i*i;j<=10000001;j+=i){
//                 if(spf[j]==j){
//                     spf[j]=i;
//                 }
//             }
//         }
//     }
// }
 
 
// ll power(ll x, ll y, ll p) 
// { 
//     ll res = 1;
//     x = x % p;
//     while (y > 0) 
//     { 
//         if (y & 1) 
//             res = (res*x) % p; 
//         y = y>>1;
//         x = (x*x) % p; 
//     } 
//     return res; 
// }
 
 
// ll modInverse(ll n, ll p) 
// { 
//     return power(n, p-2, p); 
// } 
 
 
// ll nCrModPFormat(ll n, ll r, ll p) 
// {
//     if (r==0) 
//         return 1; 
//     return (fac[n]* modInverse(fac[r], p) % p * modInverse(fac[n-r], p) % p) % p; 
// }